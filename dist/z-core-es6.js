// z-core v0.6.0
// Jakob Mattsson 2014-03-30
// Generated by CommonJS Everywhere 0.9.7
(function (global) {
  function require(file, parentModule) {
    if ({}.hasOwnProperty.call(require.cache, file))
      return require.cache[file];
    var resolved = require.resolve(file);
    if (!resolved)
      throw new Error('Failed to resolve module ' + file);
    var module$ = {
        id: file,
        require: require,
        filename: file,
        exports: {},
        loaded: false,
        parent: parentModule,
        children: []
      };
    if (parentModule)
      parentModule.children.push(module$);
    var dirname = file.slice(0, file.lastIndexOf('/') + 1);
    require.cache[file] = module$.exports;
    resolved.call(module$.exports, module$, module$.exports, dirname, file);
    module$.loaded = true;
    return require.cache[file] = module$.exports;
  }
  require.modules = {};
  require.cache = {};
  require.resolve = function (file) {
    return {}.hasOwnProperty.call(require.modules, file) ? require.modules[file] : void 0;
  };
  require.define = function (file, fn) {
    require.modules[file] = fn;
  };
  require.define('/lib/index.js', function (module, exports, __dirname, __filename) {
    (function () {
      var Promise, init, isArray, isPrimitive, keys, makeZ, object, objectCreate, pairs, proc, resolveAll, resolveCompletely, tools, values, __slice = [].slice;
      tools = require('/lib/tools.js', module);
      Promise = require('/node_modules/es6-promise/dist/commonjs/main.js', module).Promise;
      pairs = tools.pairs, keys = tools.keys, values = tools.values, object = tools.object, resolveAll = tools.resolveAll, isPrimitive = tools.isPrimitive, isArray = tools.isArray, objectCreate = tools.objectCreate, proc = tools.proc;
      resolveCompletely = function (unresolved, depth) {
        return resolveAll([unresolved]).then(function (_arg) {
          var resolved, unresolvedValues;
          resolved = _arg[0];
          if (depth <= 0 || resolved == null || isPrimitive(resolved)) {
            return resolved;
          }
          if (isArray(resolved)) {
            return resolveAll(resolved.map(function (x) {
              return resolveCompletely(x, depth - 1);
            }));
          }
          unresolvedValues = resolveAll(values(resolved).map(function (x) {
            return resolveCompletely(x, depth - 1);
          }));
          return unresolvedValues.then(function (resolvedValues) {
            return object(keys(resolved), resolvedValues);
          });
        });
      };
      init = function (defaultConf) {
        var Z, depth, mixedIn, mixinObj, updateMixinObj;
        mixedIn = {};
        mixinObj = {};
        depth = (defaultConf != null ? defaultConf.depth : void 0) != null ? defaultConf != null ? defaultConf.depth : void 0 : 1e6;
        updateMixinObj = function () {
          return pairs(mixedIn).forEach(function (_arg) {
            var func, name;
            name = _arg[0], func = _arg[1];
            return mixinObj[name] = function () {
              var args;
              args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
              return this.then(function (resolved) {
                return resolveCompletely(args, depth).then(function (args) {
                  return func.apply({ value: resolved }, args);
                });
              });
            };
          });
        };
        Z = function (obj) {
          var key, overrideLayer, resolvedObject, resultingPromise, value;
          resolvedObject = resolveCompletely(obj, depth);
          overrideLayer = objectCreate(resolvedObject);
          resultingPromise = objectCreate(overrideLayer);
          overrideLayer.then = function () {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return Z(resolvedObject.then.apply(resolvedObject, args));
          };
          for (key in mixinObj) {
            value = mixinObj[key];
            resultingPromise[key] = value;
          }
          return resultingPromise;
        };
        Z.mixin = proc(function (hash) {
          pairs(hash).forEach(function (_arg) {
            var func, name, oldOne;
            name = _arg[0], func = _arg[1];
            oldOne = mixedIn[name];
            return mixedIn[name] = function () {
              var context;
              context = { value: this.value };
              if (oldOne) {
                context.base = oldOne;
              }
              return func.apply(context, arguments);
            };
          });
          return updateMixinObj();
        });
        Z.bindSync = function (func, context) {
          return function () {
            var unresolvedArgs;
            unresolvedArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return Z(unresolvedArgs).then(function (_this) {
              return function (args) {
                return func.apply(context != null ? context : _this, args);
              };
            }(this));
          };
        };
        Z.bindAsync = function (func, context) {
          return function () {
            var ctx, unresolvedArgs;
            unresolvedArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            ctx = context != null ? context : this;
            return Z(unresolvedArgs).then(function (args) {
              return new Promise(function (resolve, reject) {
                var ex;
                args.push(function () {
                  var err, result;
                  err = arguments[0], result = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
                  if (err != null) {
                    return reject(err);
                  } else if (result.length === 1) {
                    return resolve(result[0]);
                  } else {
                    return resolve(result);
                  }
                });
                try {
                  return func.apply(ctx, args);
                } catch (_error) {
                  ex = _error;
                  return reject(ex);
                }
              });
            });
          };
        };
        return Z;
      };
      makeZ = function () {
        var Z;
        Z = init();
        Z.init = init;
        return Z;
      };
      if (typeof window !== 'undefined' && typeof window.require === 'undefined') {
        window.Z = makeZ();
      }
      if (typeof module !== 'undefined') {
        module.exports = makeZ();
      }
    }.call(this));
  });
  require.define('/node_modules/es6-promise/dist/commonjs/main.js', function (module, exports, __dirname, __filename) {
    (function () {
      var nativePromise;
      nativePromise = function () {
        return this.Promise;
      }();
      if (nativePromise == null) {
        throw new Error('No native ES6-promises - Use a shim manually or via Z');
      }
      exports.Promise = nativePromise;
    }.call(this));
  });
  require.define('/lib/tools.js', function (module, exports, __dirname, __filename) {
    (function () {
      var Promise, __hasProp = {}.hasOwnProperty;
      Promise = require('/node_modules/es6-promise/dist/commonjs/main.js', module).Promise;
      exports.pairs = function (obj) {
        var key, value, _results;
        _results = [];
        for (key in obj) {
          if (!__hasProp.call(obj, key))
            continue;
          value = obj[key];
          _results.push([
            key,
            value
          ]);
        }
        return _results;
      };
      exports.keys = function (obj) {
        var key, value, _results;
        _results = [];
        for (key in obj) {
          if (!__hasProp.call(obj, key))
            continue;
          value = obj[key];
          _results.push(key);
        }
        return _results;
      };
      exports.values = function (obj) {
        var key, value, _results;
        _results = [];
        for (key in obj) {
          if (!__hasProp.call(obj, key))
            continue;
          value = obj[key];
          _results.push(value);
        }
        return _results;
      };
      exports.object = function (keys, values) {
        var i, key, out, _i, _len;
        out = {};
        for (i = _i = 0, _len = keys.length; _i < _len; i = ++_i) {
          key = keys[i];
          out[key] = values[i];
        }
        return out;
      };
      exports.resolveAll = function (list) {
        return Promise.all(list);
      };
      exports.isPrimitive = function (obj) {
        var types;
        types = [
          'Function',
          'String',
          'Number',
          'Date',
          'RegExp',
          'Boolean'
        ];
        if (obj === true || obj === false) {
          return true;
        }
        return types.some(function (type) {
          return Object.prototype.toString.call(obj) === '[object ' + type + ']';
        });
      };
      exports.isArray = Array.isArray || function (obj) {
        return Object.prototype.toString.call(obj) === '[object Array]';
      };
      exports.objectCreate = Object.create || function (obj) {
        var F;
        F = function () {
        };
        F.prototype = obj;
        return new F;
      };
      exports.proc = function (f) {
        return function () {
          f.apply(this, arguments);
          return void 0;
        };
      };
    }.call(this));
  });
  global.Z = require('/lib/index.js');
}.call(this, this));
